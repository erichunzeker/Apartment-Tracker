Since there are two main PQ based queries, I decided to create 2 PQ based data structures.
The first is an array with the first index as the min price.
The next is also an array, however, the first index is the lowest mileage.
In order to maintain logarithmic insert time, I used a heap sort method on each array to maintain the heap.
The runtime for get lowest price/get lowest mileage is constant because it is always at the beginning of each array.
Also, the retrieval by make and model worst case is linear because it searches the whole indirection array and it might be the last one.

1.) Add car.

    When a user types in the new car, it is added to the Price array PQ and the mileage array PQ
    the arrays are then sorted to maintain the heap

2.) Update car.

    First, the program gets the car from the user
    after, it searches both arrays for the following car
    then, it asks to update, then resaves and resorts

3.) Delete

    First, program asks user to input the vin
    search both arrays for car, and use delete method
    to get rid of car and shift array to cover the hole

4.) Get lowest price

    grab index 0 from price pq

5.) get lowest mileage

    grab index 0 from mileage pq

6.) Get lowest price by make and model

    iterate through indirection array and see if make and model match. if so, take the lowest index (cheapest car)

7.) get lowest mileage by make and model

    iterate through indirection array and see if make and model match. if so, take the lowest index (lowest mileage car)

